issue,title,primary finding,validator comment,status,root cause (URL),size,robotLabel
findings-10,`PositionActionPendle.sol#_onWithdraw` does not have slippage parameter minOut set.,findings-10,primary - wrong fix,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionActionPendle.sol#L67,71,:robot:_primary
findings-11,"PositionAction20, PositionAction4626, PositionActionPendle does not handle tokenScale for CDPVault.withdraw()",findings-11,primary - wrong fix,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionActionPendle.sol#L61,100,:robot:_primary
findings-12,`SwapAction.sol#transferAndSwap` is still payable though direct ETH is not supported anymore.,findings-12,primary ,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/SwapAction.sol#L102,48,:robot:_primary
findings-13,`PositionAction4626.sol#_onWithdraw` should withdraw from position CDPVault position instead of `address(this)`.,findings-13,primary - assuming it´s a partial - short fix - validating this.,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction4626.sol#L67,76,
findings-14,TransferAction.sol passes incorrect spender for ERC2612 PERMIT, ,"OOS - NO FIX -  it looks like the previous finding was not mitigated and remained the same. Hence, marking this as OOS. The previous contest finding: https://github.com/code-423n4/2024-07-loopfi-findings/issues/152 - the guidance message from C4 Team: https://discord.com/channels/810916927919620096/1293582092533497946/1296431424819298365",Unsatisfactory,,123,:robot:_primary
findings-2,`CDPVault.sol#liquidatePositionBadDebt()` does correctly handle profit and loss,findings-2,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/CDPVault.sol#L702,103,:robot:_primary
findings-3,`PositionAction.sol#onCreditFlashLoan` may end up with stuck funds for EXACT_IN primary swaps.,findings-3,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction.sol#L491-L500,146,:robot:_primary
findings-4,Token scales are not correctly handled in CDPVault for both collateral and underlying pool tokens.,findings-4,primary - zero day,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/CDPVault.sol#L500,106,:robot:_04_group
findings-5,Locking.sol does not handle Fee-on-transfer tokens, ,OOS - https://github.com/code-423n4/2024-10-loopfi/blob/main/4naly3er-report.md#m-1-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues,Unsatisfactory,,77,:robot:_primary
findings-6,RewardManager.sol will break accounting if rewardToken is the same as collateralToken.,findings-6,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/pendle-rewards/RewardManager.sol#L44-L88,85,:robot:_primary
findings-7,PositionAction.sol#decreaseLever with EXACT_OUT primary swaps would always brick if swapFee is non-zero.,findings-7,primary - wrong fix,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction.sol#L377,128,:robot:_14_group
findings-8,PositionAction.sol#decreaseLever with EXACT_IN primary swaps would always brick if swapFee is non-zero.,findings-8,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction.sol#L488,98,:robot:_primary
findings-9,`PositionAction.sol#_withdraw` does not correctly support EXACT_OUT swaps anymore.,findings-9,primary ,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction.sol#L580,76,:robot:_primary
validation-10,Commented-Out Reward Transfer Logic, ,insufficient proof,Unsatisfactory,,54,:robot:_12_group
validation-11,Accrued Rewards Reset, ,insufficient proof,Unsatisfactory,,51,:robot:_primary
validation-12,Rewards might be lost due to the error that _updateRewardIndex() might advance lastBalance without advancing index for a token. ,validation-12,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/pendle-rewards/RewardManager.sol#L74,48,:robot:_06_group
validation-13, Incorrect Reward Calculation with Initial Index, ,insufficient proof,Unsatisfactory,,70,:robot:_primary
validation-16, Lack of Access Control for Sensitive Functions, ,insufficient proof,Unsatisfactory,,29,:robot:_28_group
validation-17,Insufficient permission checks when decreasing collateral or debt, ,insufficient proof,Unsatisfactory,,34,:robot:_primary
validation-2,PoolV3.sol#_convertToU128() is not right if limit > type(uint128).max && limit != type(uint256).max, ,insufficient proof,Unsatisfactory,,26,
validation-22,Incorrect Token Balance Accounting Due to Fee On Transfer, ,OOS - https://github.com/code-423n4/2024-10-loopfi/blob/main/4naly3er-report.md#M-1,Unsatisfactory,,48,:robot:_05_group
validation-23,Lack of debt repayment checks in `repay` function allows for overpayment, ,"the function reverts if the surplus amount is tried to be repaid. INVALID. In addition, if the user is a project built on top of the protocol - this would be their responsibility, else, the frontend takes care for the normal users",Unsatisfactory,,90,:robot:_08_group
validation-24,`kyberSwap` will not work due to incorrectly decoded returned swap values,validation-24,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/proxy/SwapAction.sol#L299-L304,56,:robot:_primary
validation-25,Donation attack vulnerability in `StakingLPEth` Contract, ,OOS - as there is no fix by the sponsors for the same issue found at the previous contest: https://github.com/code-423n4/2024-07-loopfi-findings/issues/155,Unsatisfactory,,100,:robot:_primary
validation-26,Change in cooldown should not affect users' withdrawal wait time., ,"""implement a system like that of StakingLPEth.sol in which the the current cooldownPeriod is added to cooldownStart to get the cooldownEnd that the users have to wait for."" -> it´s already implemented. ",Unsatisfactory,,85,:robot:_primary
validation-27,PositionActionPendle exits pendle without slippage protection,findings-10,,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionActionPendle.sol#L67,66,:robot:_41_group
validation-29,SwapAction's newly implemented Kyber swaps lack slippage protection,validation-29,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/proxy/SwapAction.sol#L293-L305,137,:robot:_13_group
validation-3,PoolV3.sol#updateQuotaRevenue() should be poolQuotaKeeperOnly instead of creditManagerOnly, ,insufficient reporting,Unsatisfactory,,28,
validation-30,`Locking.sol`: Users are unfairly DOS'd from their assets after initiating cooldown early, ,"the same context in previous context was resulted in ""expected behavior"" by the sponsors. https://github.com/code-423n4/2024-07-loopfi-findings/issues/165",Unsatisfactory,,96,:robot:_09_group
validation-31,No slippage applied when Withdrawing collateral from the vault and `dst != collateralToken`,findings-10,,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionActionPendle.sol#L67,76,:robot:_primary
validation-32,`modifyCollateralAndDebt()` doesn't work as intended when the vault is paused since debts can still be increased,validation-32,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/CDPVault.sol#L422-L533,65,:robot:_primary
validation-34," When adding new quoted tokens, worse off rates for Loopfi is always used for all types of tokens",validation-34,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/quotas/GaugeV3.sol#L231-L260,135,:robot:_primary
validation-37,Potential I/O Flow Issue in Rate Calculation in GaugeV3.sol, ,insufficient proof,Unsatisfactory,,27,:robot:_primary
validation-38,Potential Signature Malleability in Permit2 Signature Construction in TransferAction.sol, ,insufficient proof,Unsatisfactory,,20,:robot:_primary
validation-39,Unchecked Array Access in getSwapToken Function in SwapAction.sol, ,insufficient proof,Unsatisfactory,,23,:robot:_primary
validation-4,"Invalid handling of flash loan fees in `PositionAction::onCreditFlashLoan`, forcing it to always revert",validation-4,"primary - the root context is the same as findings-8, however, pointing out to a different root cause",Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction.sol#L473,131,:robot:_14_group
validation-40,ABI Decoding Risk in getSwapToken Function in SwapAction.sol, ,insufficient proof,Unsatisfactory,,20,:robot:_primary
validation-41,Unchecked Return Values from Virtual Function _updateRewardIndex in RewardManagerAbstract.sol, ,insufficient proof,Unsatisfactory,,20,:robot:_primary
validation-42,Lack of Slippage Protection Mechanism in `withdraw` and `redeem` Functions in StakingLPEth.sol, ,insufficient proof as the report does not provide step by step function flows and code snippets or a coded POC to provide the root cause,Unsatisfactory,,49,:robot:_00_group
validation-43,Lack of Slippage Protection in ERC4626 Implementation in PoolV3.sol , ,found to be invalid at the previous contest: https://github.com/code-423n4/2024-07-loopfi-findings/issues/179,Unsatisfactory,,96,:robot:_primary
validation-44,No Verification on `moveFunds` to Confirm Legitimate New Treasury, ,insufficient proof,Unsatisfactory,,29,:robot:_20_group
validation-45,ERC20 Transfers Lack Approval Step in ` _moveFunds`, ,insufficient proof,Unsatisfactory,,36,:robot:_01_group
validation-46,Gas Exhaustion in `moveFunds` Function with Large Token Arrays, ,invalid ,Unsatisfactory,,40,:robot:_02_group
validation-47,Cooldown Period Bypass for Withdrawals, ,invalid ,Unsatisfactory,,42,:robot:_09_group
validation-48,Precision loss vulnerability in division operations with `RAY` and `SECONDS_PER_YEAR` will affect the accuracy of interest accrual or quota calculations in `QuotasLogic.sol`, ,OOS -> https://github.com/code-423n4/2024-10-loopfi/blob/main/4naly3er-report.md#l-17-loss-of-precision,Unsatisfactory,,101,:robot:_primary
validation-49,Vulnerability in reward distribution logic lead to incorrect reward calculations in `RewardManagerAbstract.sol`, ,insufficient proof,Unsatisfactory,,88,:robot:_06_group
validation-5,Eth may be transferred from treasury contract,validation-87,,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/Treasury.sol#L12,43,:robot:_11_group
validation-50,Unrestricted token address mapping can be indirectly exploited by manipulating user rewards through other public or internal functions that call it in `RewardManagerAbstract.sol`, ,insufficient proof,Unsatisfactory,,102,:robot:_06_group
validation-51,_updateRewardIndex() Function Lacks Reentrancy Protection at RewardManager.sol, ,insufficient proof,Unsatisfactory,,23,:robot:_03_group
validation-53,Timestamp Manipulation in Interest Rate Calculation at QuotasLogic.sol, ,insufficient proof,Unsatisfactory,,29,:robot:_primary
validation-54,Potential Integer Overflow in calcQuotaRevenueChange Function at QuotasLogic.sol, ,insufficient proof,Unsatisfactory,,23,:robot:_primary
validation-56,Potential Arbitrary Jump in Delegate Call in PositionActionPendle.sol, ,insufficient proof,Unsatisfactory,,27,:robot:_primary
validation-57,Integer Overflow Risk in PositionAction4626.sol, ,insufficient proof,Unsatisfactory,,27,:robot:_primary
validation-58,Violation of Checks-Effects-Interactions Pattern in PositionAction4626.sol, ,insufficient proof,Unsatisfactory,,28,:robot:_primary
validation-59,Potential Unauthorized Token Transfers in `increaseLever` Function, ,insufficient proof,Unsatisfactory,,104,:robot:_10_group
validation-6,"Invalid handling of risdual amount in `PositionAction::onCreditFlashLoan`, forcing it to revert",validation-6,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/proxy/PositionAction.sol#L492-L499,109,:robot:_14_group
validation-60,Lack of Slippage Protection in CDPVault's Deposit and Withdrawal Function, ,insufficient proof,Unsatisfactory,,115,:robot:_00_group
validation-61,Payable Function Without Corresponding Withdraw Mechanism, ,does not point out the root cause - not validating or duping ,Unsatisfactory,,50,:robot:_07_group
validation-62,Potential for Inflated Deposit Records Due to Lack of Balance Verification in Deposit Function, ,OOS - https://github.com/code-423n4/2024-10-loopfi/blob/main/4naly3er-report.md#M-1,Unsatisfactory,,145,:robot:_05_group
validation-63,Lack of Role-Based Access Control (RBAC) in Vault Management, ,insufficient proof,Unsatisfactory,,27,:robot:_primary
validation-64,"`_distributeRewardsPrivate` wrongly set `unserIndex = 1` on first interaction, leading to erroneous reward distribution",validation-72,,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/pendle-rewards/RewardManagerAbstract.sol#L18-L19,108,:robot:_primary
validation-65,`PoolV3:: repayCreditAccount` is invalidly handling loss when `CDPVault:: liquidatePositionBadDebt` is called,findings-2,,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/CDPVault.sol#L702,58,:robot:_27_group
validation-66,"Liquidity pool is not adjusting the interest rate on healthy repayment profit, which results in incorrect rates",validation-66,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/PoolV3.sol#L610,148,:robot:_primary
validation-67,Push Model in moveFunds, ,spam,Unsatisfactory,,25,:robot:_primary
validation-68,Use of Push Pattern Instead of Pull for Fund Transfers in  PoolV3, ,insufficient proof,Unsatisfactory,,26,:robot:_primary
validation-69,Some residual recipients would now have their residues stuck in `SwapAction` after swap,validation-69,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/proxy/SwapAction.sol#L36-L50,122,:robot:_primary
validation-7,Updating ‍`cooldownAmount` Without Reducing `amount`, ,insufficient proof,Unsatisfactory,,63,:robot:_09_group
validation-70,Lack of Circuit Breaker Pattern for Critical Operations, ,spam,Unsatisfactory,,45,:robot:_primary
validation-71,Core interactions would still be accessible after protocol pause,validation-71,primary - I have doubts on this as the protocol seems to have opted one way implementation only: https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/CDPVault.sol#L438,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/CDPVault.sol#L240-L304,89,:robot:_primary
validation-72, Accumulated rewards would be frozen when the token's index is `0`,validation-72,primary,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/pendle-rewards/RewardManagerAbstract.sol#L18-L19,135,:robot:_primary
validation-73,ff-by-One Timestamp Vulnerability in Unstake Function, ,insufficient proof,Unsatisfactory,,102,:robot:_primary
validation-74,Address Comparison Vulnerability in Token Operations, ,insufficient proof,Unsatisfactory,,74,:robot:_primary
validation-76,Front-running Vulnerability in `_updateBaseInterest()` Function, ,insufficient proof,Unsatisfactory,,51,:robot:_primary
validation-77,Division by Zero and Withdraw Fee Boundaries in `_amountWithWithdrawalFee`, ,OOS - https://github.com/code-423n4/2024-10-loopfi/blob/main/4naly3er-report.md#l-10-division-by-zero-not-prevented,Unsatisfactory,,42,:robot:_primary
validation-80,Users can manipulate their position in a paused vault, ,insufficient proof,Unsatisfactory,,27,:robot:_16_group
validation-81,Users can repay more than they owe and lose funds, ,insufficient proof,Unsatisfactory,,21,:robot:_primary
validation-82,"Lack of access control ""FUNDS_ADMINISTRATOR_ROLE"" in _moveFunds function", ,invalid,Unsatisfactory,,60,:robot:_primary
validation-83,Uninitialized Mapping Access Vulnerability Allows Exploitation of Reward Distribution Logic, ,insufficient proof,Unsatisfactory,,68,:robot:_06_group
validation-84," BalancerOracle Fails to Validate Token Addresses, Resulting in Incorrect Prices for Any Token", ,insufficient proof,Unsatisfactory,,35,:robot:_primary
validation-85,Mismatch in Scaling of deltaCollateral in modifyCollateralAndDebt() Function, ,insufficient proof,Unsatisfactory,,34,:robot:_primary
validation-86,Inconsistent Calculation of Liquidation Penalty Leading to Potential Over-Penalization or Under-Penalization, ,insufficient proof,Unsatisfactory,,26,:robot:_primary
validation-87,"Treasury contract allows unrestricted access to release funds, enabling premature depletion",validation-87,"primary - could be intended OR missed,  but not overriding the function is def a gap for instance",Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/main/src/Treasury.sol#L12,60,:robot:_primary
validation-88,Issue is not fixed: Token array not sorted in PoolAction.transferAndJoin, ,"OOS - As per C4 Team's post here: https://discord.com/channels/810916927919620096/1293582092533497946/1296431424819298365 , the issue is not mitigated",Unsatisfactory,,48,:robot:_primary
validation-89,Reward calculation can allow artificial inflation of reward, ,"any balance change will be assumed as accrued, so this is the intended mechanism, but the attacker loses their tokens by this action. the only harm would be to the attacker in this case.",Unsatisfactory,,57,:robot:_06_group
validation-90,Malicious users can cause reward loss for position owners,validation-12,seems a bit different context tho,Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/pendle-rewards/RewardManager.sol#L74,78,:robot:_06_group
validation-55,Lack of Revert on Zero Balance in Treasury Contract's _moveFunds Function,,inflated due to inssuficient proof of the issue - does not hold the bar to be an audit report,Unsatisfactory,,85,:robot:_primary
validation-14,Incompatibility Between Solidity Version Pragma and Custom Error Syntax in Locking.sol,validation-14,"primary - should definitely be in a QA report,  holds the bar to be an audit report. ",Satisfactory,https://github.com/code-423n4/2024-10-loopfi/blob/d219f0132005b00a68f505edc22b34f9a8b49766/src/Locking.sol#L13-L16,87,:robot:_primary
validation-9,Flashlender Allows Unauthorized Access to flashLoan and creditFlashLoan Functions,,this is the intended mechanism,Unsatisfactory,,91,
validation-18,CDPVault has getRewards function that is unchecked transfer,,insufficient proof - the POC does not work,Unsatisfactory,,92,:robot:_primary
validation-21,"withdraw() in the Locking.sol contract emits an event transferring of 0 tokens, which results in an erroneous event emission",,inflated and does not hold the bar to be an audit report. ,Unsatisfactory,,128,:robot:_primary